
import javax.swing.JOptionPane;
//Creates a JOP class to serve as the graphics for the game
public class JOP {
	public JOP() {}
	
	public static String _Lv="";
	//Shows you the level, 1 being easiest and 3 being the hardest level in the game
	public static String Level() 
	{
		while (!(_Lv.equalsIgnoreCase("1")) && !(_Lv.equalsIgnoreCase("2"))&& !(_Lv.equalsIgnoreCase("3")))
		{_Lv = JOptionPane.showInputDialog("What level will you start at \n 1 easiest \n 2 medium \n 3 hardest");}
		msg("A quick reminder that Typing in a level Number as your move sends you to that level");
		return _Lv;
	}
//Gets your level 
	public static String getLv() {return _Lv;} 
//Helps with creating the message box for the JOP	
	public static void msg(String msg) { 
		JOptionPane.showMessageDialog(null, msg);
	}
//Helps with creating the message box for the JOP
	public static String in(String msg){
		return JOptionPane.showInputDialog(msg);
	}
}

package mod;
//This class creates the physical boundaries of the maze, from where and where not you can move
public class Maze {

	private boolean [][] _curMaze1 =
		{
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true},
		
		{true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false}
		};
	private boolean [][] _curMaze2 =
		{
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false },
		
		{false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false, false,	false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true},
		
		{true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	true, 	true, true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false},

		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false },
		
		{false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false, false,	false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true},
		
		{true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true, true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false}
		};
	private boolean [][] _curMaze3 =
		{
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,		false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false, false,	false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false, false, 	false, true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,		false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true},
		
		{false,		false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true,	true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true, true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true},
		
		{true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true, true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true,	false,		false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true,	false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	true, 	false,	false,		false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false, false,	false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	true, 	true, 	true,		true, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	true,	false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false},

		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	true, 	false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false,	false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false, false,	false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false,	false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	true, 	true, 	true, 	true, 	false, 	false, 	false,	false,		false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true},
		
		{false,		false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true, false,	false, 	true, 	true, 	true, 	true, 	true, 	true, 	true, 	true,	true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true, true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true},
		
		{true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true, true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true, false,		false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true},
		
		{false,		false, 	true, 	false, 	false, 	true, 	false, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true, false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	true, 	false, 	true, 	false, 	true, true,	true, 	true, 	true, 	false, 	false, 	true, 	true, 	false, 	false, false,		false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false, false,	false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	true, 	false, 	true, 	true, 	true, 	false, 	false, true,	false, 	true, 	false, 	false, 	false, 	true, 	false, 	false, 	false,false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false},
		
		{false,		false, 	false, 	true, 	true, 	false, 	false, 	true, 	false, 	false, true,	true, 	false, 	false, 	false, 	false, 	true, 	false, 	false, 	false, false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false },
		
		{false,		false, 	true, 	false, 	true, 	false, 	false, 	false, 	false, 	false, false,	true, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,		false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	true, 	true, 	true, 	true, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false, false,	false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false, false, 	false, true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,		false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true},
		
		{false,		false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true,	true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true, true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true},
		
		{true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true, true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true,	false,		false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true,	false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	true, 	true, 	true, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	true, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false,	false,		false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false, false,	false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	true, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	true, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true, true,	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false,	false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	true, 	false, 	false},

		{false,		false, 	true, 	false, 	false, 	false, 	false, 	true, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	false, 	false, 	false, 	false, 	false, 	true, 	false, 	false},
		
		{false,		false, 	true, 	false, 	true, 	true, 	true, 	true, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false,	false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	true, 	false, 	false},
		
		{false,		false, 	true, 	true, 	true, 	false, 	true, 	true, 	false, 	false, false,	false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false,	false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	true, 	false, 	false},
		
		{false,		false, 	true, 	false, 	true, 	true, 	true, 	true, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false,	false,		false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true},
		
		{false,		false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true,	true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true, true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true},
		
		{true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true, true,		true, 	true, 	true, 	true, 	true, 	true, 	true, 	false, 	true, false,		false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	true, 	true, 	true, 	true},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true, false,	false, 	true, 	false, 	false, 	false, 	false, 	true, 	true, 	true, false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,		false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false, false,	false, 	true, 	true, 	true, 	false, 	true, 	false, 	false, 	false},
		
		{false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false,false,		false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false, false,	false, 	true, 	false, 	true, 	true, 	true, 	false, 	false, 	false},
		
		{false,		false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,		false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false, false,	false, 	true, 	false, 	false, 	false, 	false, 	false, 	false, 	false }
		};
	
	// private int[][] _plyStartLocations;
	// private int[][] _minStartLocations;
	// private int[][] _exit;
	// private int[][] _sword;
	
	// currentLocations
	private int[] _plyStartLocations = {0,2};
	private int[] _minStartLocations = {5,9,13,15,33,37};
	private int[] _key = {34,36};
	private int[] _exit = {5,0};
	private int[] _sword = {8,2,11,6,21,2};
	
	//Gets a maze in order to start the game
	public boolean[][] getMaze(int i) 
	{ if(i==1) {return _curMaze1;} if(i==2) {return _curMaze2;}if(i==3) {return _curMaze3;}return _curMaze1;}
	public void Lock(boolean a,boolean b,boolean c, boolean d)
	{
		if(a || b || c || d) {_curMaze1[5][0] = false;_curMaze2[5][0] = false;_curMaze3[5][0] = false;}
		else {_curMaze1[5][0] = true;_curMaze2[5][0] = true;_curMaze3[5][0] = true;}
	}
	public int[] getPlyStart() { return _plyStartLocations; }
	public int[] getMinStart() { return _minStartLocations; }
	public int[] getExit() { return _exit; }
	public int[] getSword() { return _sword; }
	public int[] getKey() {return _key;}
	
}

package mod;
//This is the rival to the player and tries to kill them as they get around the maze
public class Minotaur {

	private int _row, _col;
	private boolean _isAlive;
	//Gets the starting position for the minotaur
	public int getRow() { return _row; }
	public int getCol() { return _col; }
	//Sets the starting position for the minotaur
  public void setPos(int r, int c) { _row = r; _col = c; }
	//Gets position of the minotaur and shows if its alive or not
	public Minotaur(int r, int c) {
		_row = r;
		_col = c;
		_isAlive = true;
	}
	//Checks to see is isAlive = true
	public boolean isAlive() { return _isAlive; }
	//Checks to see if isAlive = False
  public void kill() {_isAlive = false;}
}

package mod;
//Creates a player that can be moved around the map and can be used by the user 
public class Player {
	
	private int _row, _col;
	private boolean _key;
	private boolean _isAlive;
	private boolean _sword;
	private Maze _m = new Maze();
	//Gets the starting position for the player
  public int getRow() { return _row; }
	public int getCol() { return _col; }
	//Sets the position for the plater
  public void setPos(int r, int c) { _row = r; _col = c; }
	
	//Checks the location of player, if isAlive = true, if the player is holding the key or the sword as well
	public Player(int r, int c, boolean a) {
		_row = r;
		_col = c;
		_isAlive = true;
		_sword = true;
		_key = a;
	}
//Checks if isAlive = true
	public boolean isAlive() { return _isAlive; }
	//Checks if isAlive = false
  public void kill() { _isAlive = false; }
	//Checks is player has sword
  public boolean hasSword(){return _sword;}
	//Gives player the sword for it to kill the minotaur
  public void giveSword()
	{
		if(World.getI() == 1 &&_m.getSword()[0] == getRow() && _m.getSword()[1] == getCol()){_sword = false;}
		if(World.getI() == 2 &&_m.getSword()[2] == getRow() && _m.getSword()[3] == getCol()){_sword = false;}
		if(World.getI() == 3 &&_m.getSword()[4] == getRow() && _m.getSword()[5] == getCol()){_sword = false;}
	}
	//Gives key to the player for it to leave the maze
  public void giveKey()
	{
		if(World.getI() == 3 &&_m.getKey()[0] == getRow() && _m.getKey()[1] == getCol()){_key = false;}
	}
	//Checks to see if the player has the key
  public boolean hasKey() {return _key;}
}
//Creates the world of the game and puts every component together
public class World {

	private static Player _p;
	private static Minotaur _t;
	private static Maze _m;
	private static StringMap _s;
	@SuppressWarnings("unused")
	private JOP _jop;
	static int i;
	static int steps;
	static String step;

	static boolean mapChange;
//Creates a string for the world
	public World(String s) {
		run(s);
	}
	//Loads a map and sets it ready for the use of the player and minotaur
  public static int run(String s)
	{
		steps = 0;
		mapChange = false;
		if(s.equalsIgnoreCase("1")) //Loads map 1
		{
			_m = new Maze();
			_p = new Player(_m.getPlyStart()[0], _m.getPlyStart()[1], false);
			_t = new Minotaur(_m.getMinStart()[0], _m.getMinStart()[1]);
		}
		if(s.equalsIgnoreCase("2"))//Loads map 2
		{
			_m = new Maze();
			_p = new Player(_m.getPlyStart()[0], _m.getPlyStart()[1], false);
			_t = new Minotaur(_m.getMinStart()[2], _m.getMinStart()[3]);
		}
		if(s.equalsIgnoreCase("3"))// Loads map 3 
		{

			_m = new Maze();
			_p = new Player(_m.getPlyStart()[0], _m.getPlyStart()[1], true);
			_t = new Minotaur(_m.getMinStart()[4], _m.getMinStart()[5]);
		}
		_s = new StringMap(_m, _p, _t,_c,_h);
		String str = JOP._Lv;
		 i = Integer.parseInt(str);
		update(i);
		if(mapChange) // Change Map
		{
			@SuppressWarnings("unused")
			World obj = new World(JOP._Lv);
			return 0;
		}
		return 0;
	}

//Checks to see if the player is alive and makes everything work from the minotaur to the player
	public static void update(int i) {
		boolean isPlaying = true;
		while (isPlaying) {
			_m.Lock(_t.isAlive(),_p.hasKey());
			boolean on = true;
			// Get the Map
			String map = _s.generateMap(i);
			String msg = "WASD to move. What direction do you want to move?";

			while (on) 
			{
				// Get the player move
				String move = JOP.in(map + msg);

				// move the player
				if(move == null) {

				}
				else if(move.equalsIgnoreCase("steps"))
				{
					step = "" + steps +"  " + steps%2;
					JOP.msg(step);
				}
				else if(move.equalsIgnoreCase("1") || move.equalsIgnoreCase("2") || move.equalsIgnoreCase("3"))
				{
					on = false;
					mapChange = true;
					isPlaying = false;
					JOP._Lv = move;
				}
				else if (getPlayerMove(move)) {
					on = false;
				}
			}
			steps++;
			_p.giveSword();
			_p.giveKey();
			// check for victory
			if (victory()) {
				isPlaying = false;
				if(i == 3)
				{
				JOP.msg("Freedoom! From the Labyrinth");
				}
				else {
					int sum = i +1;
					JOP._Lv = ""+ sum;
					mapChange =true;
				}
			}
			// move the Minotaur
			moveMinotaur();
			
			// check for death
			if(death()) {
				isPlaying = false;
				JOP.msg("You are dead");
			}
		}
	
		
	}

	//Gets the direction of where the player wants to go.
	private static boolean getPlayerMove(String s) {

		// Moving North
		if (s.equalsIgnoreCase("W")) {
			if ((_p.getRow() - 1) >= 0 && _m.getMaze(i)[_p.getRow() - 1][_p.getCol()]) {
				_p.setPos(_p.getRow() - 1, _p.getCol());
				
				return true;
			} else {
				return false;
			}
		}
		// Moving South
		if (s.equalsIgnoreCase("S")) {
			if ((_p.getRow() + 1) < _m.getMaze(i).length && _m.getMaze(i)[_p.getRow() + 1][_p.getCol()]) {
				_p.setPos(_p.getRow() + 1, _p.getCol());
				
				return true;
			} else {
				return false;
			}
		}
		// Moving East
		if (s.equalsIgnoreCase("D")) {
			if ((_p.getCol() + 1) < _m.getMaze(i)[0].length && _m.getMaze(i)[_p.getRow()][_p.getCol() + 1]) {
				_p.setPos(_p.getRow(), _p.getCol() + 1);

				return true;
			} else {
				return false;
			}
		}
		// Moving West
		if (s.equalsIgnoreCase("A")) {
			if ((_p.getCol() - 1) >= 0 && _m.getMaze(i)[_p.getRow()][_p.getCol() - 1]) {
				_p.setPos(_p.getRow(), _p.getCol() - 1);

				return true;
			} else {
				return false;
			}
		}

		return false;
	}
	//Gets the moves for the minotaur for it to wonder around the map
	private static void moveMinotaur() {
		int rDist = _p.getRow() - _t.getRow();
		int cDist = _p.getCol() - _t.getCol();
		int r = _t.getRow();
		int c = _t.getCol();
		if(_t.isAlive()) {
		// Minotaur moving North
		if(rDist < 0 && _m.getMaze(i)[r - 1][c]) {
			_t.setPos(r - 1, c);
		}
		// Minotaur moving South.
		if(rDist > 0 && _m.getMaze(i)[r +1][c]) {
			_t.setPos(r + 1, c);
		}
		// Minotaur moving East
		if(cDist > 0 && _m.getMaze(i)[r][c + 1]) {
			_t.setPos(r, c + 1);
		}
		// Minotuar moving west
		if(cDist < 0 && _m.getMaze(i)[r][c - 1]) {
			_t.setPos(r, c - 1);
		}
	}
	//Gets the data of if the minotaur is dead or alive
  public static boolean death() {
		if(_t.getRow() == _p.getRow() &&
				_t.getCol() == _p.getCol() && _p.hasSword()) 
		{
			return true;
		}
		if (_t.getRow() == _p.getRow() &&
				_t.getCol() == _p.getCol() && !(_p.hasSword()))
		{
			_t.kill();
		}
		
		if(_c.getRow() == _p.getRow() &&
				_c.getCol() == _p.getCol() && _p.hasSword()) 
		{
			return true;
		}
		return false;
	}
//Checks to see if the player
	public static boolean victory() {
		if (_p.getRow() == _m.getExit()[0] && _p.getCol() == _m.getExit()[1])
			{return true;}
		return false;
	}
	//Gets static int i
	public static int getI() {return i;};
}

package view;
import mod.Maze;
import mod.Minotaur;
import mod.Player;
//Gives an appearance to the player, minotaur, maze, key, and sword
public class StringMap {

	private final String _wall = "[ ]";
	private final String _path = "    ";
	private final String _ply = "'v'";
	private final String _plyS = " v/";
	private final String _min = ";M;";
	private final String _exit = ".E.";
	private final String _space = "   ";
	private final String _sword = ",t,";
	private final String _Key = "`F`";
	private Maze _maze;
	private Player _plyr;
	private Minotaur _mint;
	//Puts the player and minotaur in the maze
	public StringMap(Maze m, Player p, Minotaur t) {
		_maze = m;
		_plyr = p;
		_mint = t;
	}
	//Generated the map fir the game to start
	public String generateMap(int i) {
		 String map = "";
		 for(int r = 0; r < _maze.getMaze(i).length; r++) {
			 for(int c = 0; c < _maze.getMaze(i)[0].length; c++) {
				 if(_plyr.getRow() == r && _plyr.getCol() == c && !(_plyr.hasSword())) {
					 map += _plyS + _space;
				 }
				 else if(_plyr.getRow() == r && _plyr.getCol() == c) {
					 map += _ply + _space;
				 }
				 else if(_maze.getKey()[0] == r && _maze.getKey()[1] == c && !(_plyr.hasKey())) {
					 map += _path + _space; 
				 }
				 else if(_maze.getKey()[0] == r && _maze.getKey()[1] == c) {
					 map += _Key + _space; 
				 }
				 else if(_mint.getRow() == r && _mint.getCol() == c && !(_mint.isAlive())) {
					 map += _path + _space; 
				 }
				 else if(_mint.getRow() == r && _mint.getCol() == c) {
					 map += _min + _space; 
				 }
				 else if(i == 3 &&_maze.getSword()[4] == r && _maze.getSword()[5] == c && !(_plyr.hasSword())) {
					 map += _path + _space; 
				 }
				 else if(i == 3 && _maze.getSword()[4] == r && _maze.getSword()[5] == c) {
					 map += _sword + _space; 
				 }
				 else if(i == 2 &&_maze.getSword()[2] == r && _maze.getSword()[3] == c && !(_plyr.hasSword())) {
					 map += _path + _space; 
				 }
				 else if(i == 2 && _maze.getSword()[2] == r && _maze.getSword()[3] == c) {
					 map += _sword + _space; 
				 }
				 else if(i == 1 &&_maze.getSword()[0] == r && _maze.getSword()[1] == c && !(_plyr.hasSword())) {
					 map += _path + _space; 
				 }
				 else if(i == 1 &&_maze.getSword()[0] == r && _maze.getSword()[1] == c) {
					 map += _sword + _space; 
				 }
				 else if(_maze.getExit()[0] == r && _maze.getExit()[1] == c) {
					 map += _exit + _space; 
				 }
				 else if(_maze.getMaze(i)[r][c]) {
					 map += _path + _space;
				 }
				 else {
					map += _wall + _space; 
				 }
			 }
			 map += "\n";
		 }
		 map += "\n";
		
		 
		 
		 
		 
		 return map;
	}
	
}
